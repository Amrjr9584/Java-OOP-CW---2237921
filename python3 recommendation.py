# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NMTqe8OoieAKEnoQDe0GP4ZWpkWCa74z
"""

# recommendation.py

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import sys
import json

# Read dataset from command line argument
file_path = sys.argv[1]  # Pass the path of the CSV as a command line argument
user_id = sys.argv[2]    # Pass the user ID as a command line argument

# Load the dataset
df = pd.read_csv('/content/reading_history.csv', header=None)
df.columns = ['username', 'headline', 'content', 'link', 'category', 'preference', 'datetime']

# Filter out articles where the user liked the article (preference = 'liked')
liked_articles_df = df[df['preference'] == 'LIKED']

# Function to recommend articles based on content similarity
def recommend_articles(user_id, df, liked_articles_df):
    # Get the articles liked by the user
    user_liked_articles = liked_articles_df[liked_articles_df['username'] == user_id]

    # Combine the liked articles' headline and content for content-based similarity
    liked_articles_content = user_liked_articles['headline'] + " " + user_liked_articles['content']

    # Use TfidfVectorizer to convert the text data into numerical data
    tfidf_vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf_vectorizer.fit_transform(df['headline'] + " " + df['content'])

    # For each liked article, find similar articles in the dataset
    recommendations = []

    for liked_article in liked_articles_content:
        liked_article_tfidf = tfidf_vectorizer.transform([liked_article])
        similarity_scores = cosine_similarity(liked_article_tfidf, tfidf_matrix)

        # Get the index of the most similar articles
        similar_articles_indices = similarity_scores.argsort()[0][-6:-1]  # Get top 5 most similar articles
        for idx in similar_articles_indices:
            article = df.iloc[idx]
            recommendations.append({
                'headline': article['headline'],
                'content': article['content'],
                'link': article['link']
            })

    return recommendations

# Example usage
recommended_articles = recommend_articles(user_id, df, liked_articles_df)

# Output the recommendations as JSON
print(json.dumps(recommended_articles))

